; RuntimeTranslation Template (C) Chris Prusik (KAP1 Ltd www.kap1.net), NLocalizer.codeplex.com
; $Id$
;
@Code
/*******************************************************************************

  NLocalizer (C) Chris Prusik (KAP1 Ltd www.kap1.net), NLocalizer.codeplex.com
  Code file to languages: $(Locales) autogenerated $(DateTime)
  $Id$

*******************************************************************************/

$(Using)
namespace NLocalizer
{
   public static class RuntimeTranslator
   {
        public static void Translate()
        {
            Translate(Translator.Translation);
        }

        public static void Translate(Translation translation)
        {
            Translate(translation.CurrentLanguage, translation);
        }

        public static void Translate(string language, Translation translation)
        {
$(TranslateClass)
		}

        public static void Remember()
        {
            Remember(Translator.Translation);
        }


        public static void Remember(Translation translation)
        {
$(RememberClass)
		}

        public static void Restore()
        {
            Restore(Translator.Translation);
        }

        public static void Restore(Translation translation)
        {
$(RestoreClass)
        }

        public static string GetMacro(string macro)
        {
            switch (macro)
            {
$(Macro)
               default:
                   return "";
            }
        }

$(ClassTranslation)
   }
}

@Using
using ${NamespaceName);
@TranslateClass
            Translate$(ClassName)(language, translation);
@RememberClass
            Remember$(ClassName)(translation);
@RestoreClass
            Restore$(ClassName)(translation);
@StaticClass
        public static void Remember$(ClassName)()
        {
            Remember$(ClassName)(Translator.Translation);
        }

        public static void Remember$(ClassName)(Translation translation)
        {
$(StaticClassRemember)
        }

        public static void Restore$(ClassName)()
        {
            Restore$(ClassName)(Translator.Translation);
		}

        public static void Restore$(ClassName)(Translation translation)
        {
            if (translation.Exists("Neutral", "$(ClassName)"))
                Translate$(ClassName)("Neutral", translation);
        }

        public static void Translate$(ClassName)(string language)
        {
            Translate$(ClassName)(language, Translator.Translation);
        }

        public static void Translate$(ClassName)(string language, Translation translation)
        {
            if (translation.Exists("Neutral", "$(ClassName)") == false)
                Remember$(ClassName)(translation);

$(StaticClassTranslate)
        }
@StaticClassRemember
            translation.SetProperty("Neutral", "$(ClassName)", "$(PropertyName)", $(ClassName).$(PropertyName), true);
@StaticClassTranslate
            $(ClassName).$(PropertyName) = translation.GetProperty(language, "$(ClassName)", "$(PropertyName)", GetMacro).Message;
@DynamicClass
        public static $(ClassName) Create$(ClassName)()
        {
            return new $(ClassName)();
        }

        public static void Remember($(ClassName) obj)
        {
            Remember(obj, Translator.Translation);
        }

        public static void Remember($(ClassName) obj, Translation translation)
        {
$(DynamicClassRemember)
			Remember(translation);
        }

        public static void Restore($(ClassName) obj)
        {
            Restore(obj, Translator.Translation);
        }

        public static void Restore($(ClassName) obj, Translation translation)
        {
            if (translation.Exists("Neutral", "$(ClassName)"))
                Translate("Neutral", obj, translation);
        }

        public static void Translate(string language, $(ClassName) obj)
        {
            Translate(language, obj, Translator.Translation);
        }

        public static void Translate(string language, $(ClassName) obj, Translation translation)
        {
            if (translation.Exists("Neutral", "$(ClassName)") == false)
                Remember(obj, translation);

			Translate(language, translation);

$(DynamicClassTranslate)
        }
@DynamicClassRemember
            translation.SetProperty("Neutral", "$(ClassName)", "$(PropertyName)", obj.$(PropertyName), false);
@DynamicClassTranslate
            obj.$(PropertyName) = translation.GetProperty(language, "$(ClassName)", "$(PropertyName)", GetMacro).Message;
@Macro
            case "$(MacroName)":
                return $(MacroCode);